apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
def bakPath = file("${buildDir}/bakApk/")
def appDirectory = "app-1228-09-35-46"
android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        applicationId "com.rye.catcher.zzg"
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode 7
        versionName "1.0.7"
        multiDexEnabled true
        ndk {
            abiFilter "armeabi-v7a"
        }
    }
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        config {
            storeFile file('../ryeCatcher.jks')
            storePassword 'catcher'
            keyAlias 'key0'
            keyPassword 'catcher'
        }
        //release{}   debug{}
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config //签名不要忘了撒
            manifestPlaceholders = ["appName": "RyeCatcher"] //manifest替换
            zipAlignEnabled true
        }
        debug {//默认安装的文件，可修改
            def today = new Date()
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            signingConfig signingConfigs.config
            manifestPlaceholders = ["appName": "麦田Z"]
            applicationIdSuffix '.anyOATest' //applicationIdSuffix代表了默认的应用ID
            versionNameSuffix '.' + today.format('MMdd')
            zipAlignEnabled false
        }

        preview {
            shrinkResources false //用来开启删除无用资源，也就是没有被引用的文件,和底下这个要配合使用，只有全为true两者才起作用
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            signingConfig signingConfigs.config
            manifestPlaceholders = ["appName": "RyeCatcherP"]
            applicationIdSuffix '.anyOATest'
            versionNameSuffix '.01'
            zipAlignEnabled true
            matchingFallbacks = ['debug', 'release']

        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }

    packagingOptions {//排除不想放入到apk文件里的文件
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
/*************************先屏蔽多渠道打包****************************/
//    flavorDimensions("money", "channel")
    flavorDimensions("channel")
    productFlavors {
//        vip {
//            dimension "money"
//            buildConfigField("boolean", "IS_VIP_VERSION", "true")
//            minSdkVersion 16
//        }
//        free {
//            dimension "money"
//            buildConfigField("boolean", "IS_VIP_VERSION", "false")
//            minSdkVersion 16
//        }
        baidu {
            manifestPlaceholders = [CHANNEL: "baidu"]
            dimension "channel"
            buildConfigField("boolean", "IS_baidu_VERSION", "true")
            minSdkVersion 16
        }
        xiaomi {
            manifestPlaceholders = [CHANNEL: "xiaomi"]
            dimension "channel"
            buildConfigField("boolean", "IS_baidu_VERSION", "false")
            minSdkVersion 16
        }
    }

    lintOptions {//貌似是用来屏蔽lint错误，拼写错误?
        checkReleaseBuilds false
        abortOnError false
    }

    greendao {
        schemaVersion 1
        daoPackage 'com.rye.catcher.GreenDaos.Base'
        targetGenDir 'src/main/java'
    }
}
repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }//Toasty
}
android.applicationVariants.all { variant ->

    variant.outputs.all { output ->
        if (variant.buildType.name == "debug" || variant.buildType.name == "preview") {
            resValue "string", "ip_out", "http://114.255.225.50:8088"
            resValue "string", "ip_in", "http://122.40.130.74:8088"
            resValue "string", "app_name", "寻梦测"
            resValue "string", "SCREENSHOT_ENANBLE", "1"
            resValue "string", "SANDBOX_WHITELIST", "122.40.130.74;122.18.157.193;122.19.141.46;83."
            resValue "string", "CAN_CHANGE_USER_CONFIG", "0"
            buildConfigField "String", "ip", "\"www.bilibili.com\""
            if (variant.buildType.name == "preview") {
                outputFileName = "${rootProject.name}-${variant.buildType.name}" +
                        "-${variant.versionName}.apk"
                variant.packageApplication.outputDirectory = new File("./../apk")
            }

        } else {
            resValue "string", "ip_out", "https://140.206.54.50:8080"
            resValue "string", "ip_in", "http://10.248.113.15:8081"
            resValue "string", "app_name", "寻梦"
            resValue "string", "SCREENSHOT_ENANBLE", "0"
            resValue "string", "SANDBOX_WHITELIST", "10.248.113.15;cbms-web.icbc"
            resValue "string", "CAN_CHANGE_USER_CONFIG", "1"
            buildConfigField "String", "ip", "\"www.bilibili.com\""
//            outputFileName = "${rootProject.name}-${variant.buildType.name}" +
//                    "-${variant.versionName}.apk"
//            variant.packageApplication.outputDirectory = new File("./../apk")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:support-v4:27.1.1'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportVer"
    implementation "com.android.support:cardview-v7:$rootProject.ext.supportVer"
    implementation "com.android.support:recyclerview-v7:$rootProject.ext.supportVer"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:design:$rootProject.ext.supportVer"
    testImplementation 'junit:junit:4.12'
    implementation files('libs/commons-io-2.4.jar')
    implementation files('libs/IKAnalyzer2012_u6.jar')//sqlite全文检索；
    implementation files('libs/lucene-core-3.6.0.jar')//sqlite全文检索；
    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'org.greenrobot:greendao:3.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okHttpVer"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.okHttpVer"
    implementation 'com.squareup.retrofit2:converter-gson:2.0.2'
    implementation 'com.github.GrenderG:Toasty:1.2.5'
    implementation project(':pulltorefresh')
    implementation "com.github.bumptech.glide:glide:$rootProject.ext.glideVer"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.ext.glideVer"
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.tencent.bugly:crashreport:latest.release'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    implementation "com.jakewharton:butterknife:$rootProject.ext.butterVer"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterVer"
    //6.0权限适配，机型适配
    implementation 'com.yanzhenjie:permission:2.0.0-rc11'
    implementation 'com.alibaba:fastjson:1.2.49'
    implementation 'com.amap.api:location:latest.integration'

    implementation "com.android.support:multidex:1.0.1"
    //tinker的核心库
    implementation("com.tencent.tinker:tinker-android-lib:1.9.1") { changing = true }
    //可选，用于生成application类
    annotationProcessor("com.tencent.tinker:tinker-android-anno:1.9.1") { changing = true }
    compileOnly("com.tencent.tinker:tinker-android-anno:1.9.1") { changing = true }
}

ext{
    tinkerEnable = true
    tinkerOldApkPath = "${bakPath}/${appDirectory}"
    tinkerID="1.0"
    tinkerApplyMappingPath = "${bakPath}/${appDirectory}"
    tinkerApplyResourcePath = "${bakPath}/${appDirectory}"
    //多渠道打包，变量名可以自定义
    tinkerBuildFlavorDirectory = "${bakPath}/${appDirectory}"
}

def buildWithTinker(){
    return ext.tinkerEnable
}

def getOldApkPath(){
    return ext.tinkerOldApkPath
}

def getApplyMappingPath(){
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath(){
    return ext.tinkerApplyResourcePath
}


def getTinkerIdValue(){
    return ext.tinkerID
}
//多渠道打包
def getTinkerBuildFlavorDirectory(){
    return  ext.tinkerBuildFlavorDirectory
}


if(buildWithTinker()){
    apply plugin:'com.tencent.tinker.patch'

    tinkerPatch{
        oldApk=getOldApkPath() //指定old apk文件路径
        ignoreWarning = false //不忽略警告
        useSign = true //强制patch文件也使用签名
        tinkerEnable = buildWithTinker() //指定是否启用tinker
        buildConfig{
            applyMapping = getApplyMappingPath() //指定old apk 打包时所用的混淆文件
            applyResourceMapping = getApplyResourceMappingPath() //指定old apk的资源文件
            tinkerId = getTinkerIdValue()//指定TinkerID
            keepDexApply = false
        }

        dex{
            dexMode="jar" //jar、raw
            pattern=["classes*.dex","assets/secondary-dex-?.jar"] //指定dex文件目录
            loader=["com.rye.catcher.zApplication"]
        }

        lib{
            pattern=["libs/*/*.so"]
        }

        res{
            pattern=["res/*","assets/*","resources.arsc","AndroidManifest.xml"]

            ignoreChange=["assets/sample_meta.txt"]//指定不受影响的文件

            largeModSize = 100 //资源修改大小默认值
        }

        packageConfig{
           configField("patchMessage","fix the 1.0 version's bugs")
           configField("patchVersion","1.0")
        }

    }
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * 复制基准包和其它必须文件到指定目录
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    /**
     * 多渠道打包
     */
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}