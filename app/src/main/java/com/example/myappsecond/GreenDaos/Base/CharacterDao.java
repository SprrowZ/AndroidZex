package com.example.myappsecond.GreenDaos.Base;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHARACTER".
*/
public class CharacterDao extends AbstractDao<Character, String> {

    public static final String TABLENAME = "CHARACTER";

    /**
     * Properties of entity Character.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", false, "ID");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
        public final static Property SEX = new Property(2, boolean.class, "SEX", false, "SEX");
        public final static Property CARTOON_NAME = new Property(3, String.class, "CARTOON_NAME", true, "CARTOON__NAME");
        public final static Property AGE = new Property(4, int.class, "AGE", false, "AGE");
        public final static Property ANIME_DUBBING = new Property(5, String.class, "ANIME_DUBBING", false, "ANIME__DUBBING");
        public final static Property NATIONALITY = new Property(6, String.class, "NATIONALITY", false, "NATIONALITY");
        public final static Property CARTOON_ID = new Property(7, Long.class, "CARTOON_ID", false, "CARTOON__ID");
    }

    private Query<Character> cartoons_CHARACTERSQuery;

    public CharacterDao(DaoConfig config) {
        super(config);
    }
    
    public CharacterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHARACTER\" (" + //
                "\"ID\" INTEGER," + // 0: ID
                "\"NAME\" TEXT," + // 1: NAME
                "\"SEX\" INTEGER NOT NULL ," + // 2: SEX
                "\"CARTOON__NAME\" TEXT PRIMARY KEY NOT NULL ," + // 3: CARTOON_NAME
                "\"AGE\" INTEGER NOT NULL ," + // 4: AGE
                "\"ANIME__DUBBING\" TEXT," + // 5: ANIME_DUBBING
                "\"NATIONALITY\" TEXT," + // 6: NATIONALITY
                "\"CARTOON__ID\" INTEGER);"); // 7: CARTOON_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHARACTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Character entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
        stmt.bindLong(3, entity.getSEX() ? 1L: 0L);
 
        String CARTOON_NAME = entity.getCARTOON_NAME();
        if (CARTOON_NAME != null) {
            stmt.bindString(4, CARTOON_NAME);
        }
        stmt.bindLong(5, entity.getAGE());
 
        String ANIME_DUBBING = entity.getANIME_DUBBING();
        if (ANIME_DUBBING != null) {
            stmt.bindString(6, ANIME_DUBBING);
        }
 
        String NATIONALITY = entity.getNATIONALITY();
        if (NATIONALITY != null) {
            stmt.bindString(7, NATIONALITY);
        }
 
        Long CARTOON_ID = entity.getCARTOON_ID();
        if (CARTOON_ID != null) {
            stmt.bindLong(8, CARTOON_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Character entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
        stmt.bindLong(3, entity.getSEX() ? 1L: 0L);
 
        String CARTOON_NAME = entity.getCARTOON_NAME();
        if (CARTOON_NAME != null) {
            stmt.bindString(4, CARTOON_NAME);
        }
        stmt.bindLong(5, entity.getAGE());
 
        String ANIME_DUBBING = entity.getANIME_DUBBING();
        if (ANIME_DUBBING != null) {
            stmt.bindString(6, ANIME_DUBBING);
        }
 
        String NATIONALITY = entity.getNATIONALITY();
        if (NATIONALITY != null) {
            stmt.bindString(7, NATIONALITY);
        }
 
        Long CARTOON_ID = entity.getCARTOON_ID();
        if (CARTOON_ID != null) {
            stmt.bindLong(8, CARTOON_ID);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Character readEntity(Cursor cursor, int offset) {
        Character entity = new Character( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NAME
            cursor.getShort(offset + 2) != 0, // SEX
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CARTOON_NAME
            cursor.getInt(offset + 4), // AGE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ANIME_DUBBING
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NATIONALITY
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // CARTOON_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Character entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSEX(cursor.getShort(offset + 2) != 0);
        entity.setCARTOON_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAGE(cursor.getInt(offset + 4));
        entity.setANIME_DUBBING(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNATIONALITY(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCARTOON_ID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Character entity, long rowId) {
        return entity.getCARTOON_NAME();
    }
    
    @Override
    public String getKey(Character entity) {
        if(entity != null) {
            return entity.getCARTOON_NAME();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Character entity) {
        return entity.getCARTOON_NAME() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "CHARACTERS" to-many relationship of Cartoons. */
    public List<Character> _queryCartoons_CHARACTERS(Long CARTOON_ID) {
        synchronized (this) {
            if (cartoons_CHARACTERSQuery == null) {
                QueryBuilder<Character> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CARTOON_ID.eq(null));
                cartoons_CHARACTERSQuery = queryBuilder.build();
            }
        }
        Query<Character> query = cartoons_CHARACTERSQuery.forCurrentThread();
        query.setParameter(0, CARTOON_ID);
        return query.list();
    }

}
