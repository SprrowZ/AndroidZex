package com.example.myappsecond.GreenDaos.Base;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB__KEY_VALUE".
*/
public class TB_KeyValueDao extends AbstractDao<TB_KeyValue, Void> {

    public static final String TABLENAME = "TB__KEY_VALUE";

    /**
     * Properties of entity TB_KeyValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KEY = new Property(0, String.class, "KEY", false, "KEY");
        public final static Property VALUE = new Property(1, String.class, "VALUE", false, "VALUE");
    }


    public TB_KeyValueDao(DaoConfig config) {
        super(config);
    }
    
    public TB_KeyValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB__KEY_VALUE\" (" + //
                "\"KEY\" TEXT," + // 0: KEY
                "\"VALUE\" TEXT);"); // 1: VALUE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB__KEY_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TB_KeyValue entity) {
        stmt.clearBindings();
 
        String KEY = entity.getKEY();
        if (KEY != null) {
            stmt.bindString(1, KEY);
        }
 
        String VALUE = entity.getVALUE();
        if (VALUE != null) {
            stmt.bindString(2, VALUE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TB_KeyValue entity) {
        stmt.clearBindings();
 
        String KEY = entity.getKEY();
        if (KEY != null) {
            stmt.bindString(1, KEY);
        }
 
        String VALUE = entity.getVALUE();
        if (VALUE != null) {
            stmt.bindString(2, VALUE);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TB_KeyValue readEntity(Cursor cursor, int offset) {
        TB_KeyValue entity = new TB_KeyValue( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // KEY
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // VALUE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TB_KeyValue entity, int offset) {
        entity.setKEY(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVALUE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TB_KeyValue entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TB_KeyValue entity) {
        return null;
    }

    @Override
    public boolean hasKey(TB_KeyValue entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
