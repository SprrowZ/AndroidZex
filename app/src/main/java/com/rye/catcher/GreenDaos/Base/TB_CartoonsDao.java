package com.rye.catcher.GreenDaos.Base;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB__CARTOONS".
*/
public class TB_CartoonsDao extends AbstractDao<TB_Cartoons, Long> {

    public static final String TABLENAME = "TB__CARTOONS";

    /**
     * Properties of entity TB_Cartoons.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
        public final static Property ACTORS = new Property(2, String.class, "ACTORS", false, "ACTORS");
        public final static Property START_TIME = new Property(3, java.util.Date.class, "START_TIME", false, "START__TIME");
        public final static Property IS_END = new Property(4, boolean.class, "IS_END", false, "IS__END");
        public final static Property DIRECTOR = new Property(5, String.class, "DIRECTOR", false, "DIRECTOR");
        public final static Property HERO = new Property(6, String.class, "HERO", false, "HERO");
        public final static Property HEROINE = new Property(7, String.class, "HEROINE", false, "HEROINE");
        public final static Property PART = new Property(8, int.class, "PART", false, "PART");
        public final static Property PLOT = new Property(9, String.class, "PLOT", false, "PLOT");
        public final static Property INSERT_TIME = new Property(10, java.util.Date.class, "INSERT_TIME", false, "INSERT__TIME");
    }

    private DaoSession daoSession;


    public TB_CartoonsDao(DaoConfig config) {
        super(config);
    }
    
    public TB_CartoonsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB__CARTOONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"NAME\" TEXT NOT NULL UNIQUE ," + // 1: NAME
                "\"ACTORS\" TEXT," + // 2: ACTORS
                "\"START__TIME\" INTEGER," + // 3: START_TIME
                "\"IS__END\" INTEGER NOT NULL ," + // 4: IS_END
                "\"DIRECTOR\" TEXT," + // 5: DIRECTOR
                "\"HERO\" TEXT," + // 6: HERO
                "\"HEROINE\" TEXT," + // 7: HEROINE
                "\"PART\" INTEGER NOT NULL ," + // 8: PART
                "\"PLOT\" TEXT," + // 9: PLOT
                "\"INSERT__TIME\" INTEGER);"); // 10: INSERT_TIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB__CARTOONS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TB_Cartoons entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getNAME());
 
        String ACTORS = entity.getACTORS();
        if (ACTORS != null) {
            stmt.bindString(3, ACTORS);
        }
 
        java.util.Date START_TIME = entity.getISSUE_TIME();
        if (START_TIME != null) {
            stmt.bindLong(4, START_TIME.getTime());
        }
        stmt.bindLong(5, entity.getIS_END() ? 1L: 0L);
 
        String DIRECTOR = entity.getDIRECTOR();
        if (DIRECTOR != null) {
            stmt.bindString(6, DIRECTOR);
        }
 
        String HERO = entity.getHERO();
        if (HERO != null) {
            stmt.bindString(7, HERO);
        }
 
        String HEROINE = entity.getHEROINE();
        if (HEROINE != null) {
            stmt.bindString(8, HEROINE);
        }
        stmt.bindLong(9, entity.getPART());
 
        String PLOT = entity.getPLOT();
        if (PLOT != null) {
            stmt.bindString(10, PLOT);
        }
 
        java.util.Date INSERT_TIME = entity.getINSERT_TIME();
        if (INSERT_TIME != null) {
            stmt.bindLong(11, INSERT_TIME.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TB_Cartoons entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getNAME());
 
        String ACTORS = entity.getACTORS();
        if (ACTORS != null) {
            stmt.bindString(3, ACTORS);
        }
 
        java.util.Date START_TIME = entity.getISSUE_TIME();
        if (START_TIME != null) {
            stmt.bindLong(4, START_TIME.getTime());
        }
        stmt.bindLong(5, entity.getIS_END() ? 1L: 0L);
 
        String DIRECTOR = entity.getDIRECTOR();
        if (DIRECTOR != null) {
            stmt.bindString(6, DIRECTOR);
        }
 
        String HERO = entity.getHERO();
        if (HERO != null) {
            stmt.bindString(7, HERO);
        }
 
        String HEROINE = entity.getHEROINE();
        if (HEROINE != null) {
            stmt.bindString(8, HEROINE);
        }
        stmt.bindLong(9, entity.getPART());
 
        String PLOT = entity.getPLOT();
        if (PLOT != null) {
            stmt.bindString(10, PLOT);
        }
 
        java.util.Date INSERT_TIME = entity.getINSERT_TIME();
        if (INSERT_TIME != null) {
            stmt.bindLong(11, INSERT_TIME.getTime());
        }
    }

    @Override
    protected final void attachEntity(TB_Cartoons entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TB_Cartoons readEntity(Cursor cursor, int offset) {
        TB_Cartoons entity = new TB_Cartoons( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ACTORS
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // START_TIME
            cursor.getShort(offset + 4) != 0, // IS_END
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DIRECTOR
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // HERO
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // HEROINE
            cursor.getInt(offset + 8), // PART
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PLOT
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // INSERT_TIME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TB_Cartoons entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNAME(cursor.getString(offset + 1));
        entity.setACTORS(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setISSUE_TIME(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setIS_END(cursor.getShort(offset + 4) != 0);
        entity.setDIRECTOR(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHERO(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHEROINE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPART(cursor.getInt(offset + 8));
        entity.setPLOT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setINSERT_TIME(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TB_Cartoons entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TB_Cartoons entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TB_Cartoons entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
