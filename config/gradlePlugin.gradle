import java.util.regex.Matcher
import java.util.regex.Pattern

def getPackageName() {
    def appName = ''
    def path = 'app/src/main/java/'
    File appfile = new File(path)
    while (appfile.list().size() == 1) {
        appName = appName + '/' + appfile.list()[0]
        appfile = new File(path + appName + '/')
    }
    return appName
}

def getResPath() {
    return 'app/src/main/res/'
}

static def getRandomString() {
    def str = 'abcdefghijklmnopqstuvwxzy'
    def randomString = ''
    for (int i = 0; i < 10; i++) {
        def number = new Random().nextInt(25)
        randomString += str.charAt(number)
    }
    randomString
}
//--------copy

/**************************************重命名XML********************************************/
task xmlRenameTask() {
    doLast {
        def nameMap = xmlReName()
        xmlJavaReplace(nameMap)
        xmlLog(nameMap)
        renameSwXml(nameMap)
    }

}
/**
 * xml重命名
 * @return nameMap--存储xml重命名前，以及重命名后的文件名
 */
def xmlReName() {
    def nameMap = [:]
    FileTree tree = fileTree(dir: 'src/main/res/layout')
    tree.include '*.xml'
    tree.each { File file ->
        def appendString = new StringBuilder()
        //取传入的文件的名字，而不是遍历中的文件名
        def originName = file.name.split('\\.').first()
        def randomName = getRandomString()
        boolean hasReplace = false
        file.withReader('UTF-8') { reader ->
            reader.eachLine { line ->
                if (line.indexOf("@layout/") != -1) {//找到了，就得去nameMap查了
                    //xml前缀名
                    def quoteXmlName = line.substring(line.indexOf("/") + 1, line.lastIndexOf("\""))
                    if (nameMap.containsKey(quoteXmlName)) {//xml文件已被替换，那么对应的引用也替换掉
                        line = line.replaceAll(quoteXmlName, nameMap.get(quoteXmlName))//替换
                        //这个log有意思
                        println("-------------@layout/$quoteXmlName  has been replaced by ${nameMap.get(quoteXmlName)}")
                    } else {//说明应该替换的@layout文件，还没有自己的随机序列值
                        def shouldRandomName = getRandomString()
                        nameMap.put(quoteXmlName, shouldRandomName)
                        line = line.replaceAll(quoteXmlName, shouldRandomName)
                    }

                    hasReplace = true
                }
                appendString.append(line + '\n')
            }
            if (hasReplace) {
                file.withWriter('UTF-8') { writer ->
                    appendString.eachLine {
                        writer.writeLine(it)
                    }

                }
            }

        }

        if (nameMap.get(originName) == null) {//文件未被重命名且未被分配随机名
            file.renameTo(file.path.replaceAll(originName, randomName))
            nameMap.put(originName, randomName)
            println("$originName has been renamed to $randomName")
        } else {//文件已被分配随机名
            file.renameTo(file.path.replaceAll(originName, nameMap.get(originName)))
        }

    }
    return nameMap
}
/**
 * 替换java文件及kt文件中的xml文件
 * */
def xmlJavaReplace(Map nameMap) {//等所有XML文件替换完成后，再替换Java里的
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include('**/*.java')
    tree.include('**/*.kt')
    tree.each { File file ->
        def overrideString = new StringBuilder()
        def needReplace = false
        file.withReader { reader ->
            reader.eachLine { line ->
                if (line.indexOf("R.layout.") != -1) {//有布局文件
                    def xmlPrefix = ''
                    Pattern pattern = Pattern.compile("[a-z0-9_]+")
                    Matcher matcher = pattern.matcher(line.substring(line.lastIndexOf(".")))
                    while (matcher.find()) {
                        xmlPrefix = matcher.group(0)
                        break
                    }
                    println("IIIIIIIIIIII--${xmlPrefix}，${file.name},${nameMap.containsKey(xmlPrefix)},findTarget:${line.substring(line.lastIndexOf("."))}")
                    //将字符串劈成两半，只修改后半部分
                    if (nameMap.containsKey(xmlPrefix)) {
                        def part1 = line.substring(0, line.lastIndexOf("."))
                        def part2 = line.substring(line.lastIndexOf("."))
                        //只替换后半段的，也就是R.layout.之后的匹配目标
                        part2 = part2.replaceAll(xmlPrefix, nameMap.get(xmlPrefix))
                        line = part1 + part2
                        needReplace = true
                    }

                }

                if (line.indexOf("kotlinx.android.synthetic.main") != -1) {
//kt文件判断自动导入,所以java实际上不用判断的

                    def target = line.split("\\.")[4]
                    println("@@@@@@@@@@@@@@@------:${target},nameMap:${nameMap.get(target)},fileName:${file.name}")
                    line = line.replaceAll(target, nameMap.get(target))
                    needReplace = true
                }
                overrideString.append(line + "\n")
            }
        }

        if (needReplace) {
            file.withWriter('UTF-8') { writer ->
                overrideString.eachLine { line ->
                    writer.writeLine(line)
                }
            }
        }

    }
}
/**
 * 记录xml重命名日志
 * @param nameMap
 * @return
 */
def xmlLog(Map nameMap) {
    //将重命名的文件前后名字---输出到文件中
    File renameFile = new File(getRootDir().absolutePath + "/config/", "renameFile.txt")

    if (!renameFile.exists() || renameFile.isDirectory()) {
        renameFile.createNewFile()
    }
    renameFile.withWriter('UTF-8') { writer ->
        nameMap.each {
            writer.writeLine("$it.key ----------->>>>>>>>>>   $it.value")
        }

    }
}

/**
 * 重命名最小宽度限定符里的xml文件
 * @param nameMap
 * @return
 */
def renameSwXml(Map nameMap) {
    File sw360 = new File(this.getRootDir().absolutePath + "/app/src/main/res/values-sw360dp/layout.xml")

    File sw375 = new File(this.getRootDir().absolutePath + "/app/src/main/res/values-sw375dp/layout.xml")

    println("========================??" + sw360.exists() + "," + sw375.exists())

    dealSwFile(sw360, nameMap)
    dealSwFile(sw375, nameMap)
}

def dealSwFile(File file, Map nameMap) {
    if (!file.exists()) {
        return
    }

    def xmlName = ''
    def contentBuilder = new StringBuilder()
    def needOverride = false
    file.withReader { reader ->
        reader.eachLine { line ->
            if (line.indexOf('@layout/') != -1) {
                needOverride = true
                Pattern pattern = Pattern.compile("[a-z0-9_]+")
                Matcher matcher = pattern.matcher(line.split('/')[1])
                while (matcher.find()) { //这里有问题
                    xmlName = matcher.group(0)
                }
                if (nameMap.containsKey(xmlName)) {
                    line = line.replaceAll(xmlName, nameMap.get(xmlName))
                }

            }
            contentBuilder.append(line + "\n")
        }
    }


    if (needOverride) {
        file.withWriter('UTF-8') { writer ->
            contentBuilder.eachLine { line ->
                writer.writeLine(line)
            }
        }
    }
}


/***********************************重命名Java文件*************************************/


