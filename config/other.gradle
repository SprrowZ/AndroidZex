import java.util.regex.Matcher
import java.util.regex.Pattern

//android{
//
//}


//-----||-------------------------Demo-------------------------||-----------//
this.project.afterEvaluate {//将task挂接到build生命周期后
    def buildTask = project.tasks.getByName('clean')//
    if (buildTask == null) throw GradleException('the build task is not found')
    buildTask.doFirst {
//           writeTask.execute()
        println '---------clean --------'
        tasks.testLife
    }
}

task testLife {
    doLast {
        println '---********-------测试用gradle-----********---'
        println "主项目信息:$rootProject.ext.compileSdkVer"
    }
}

task writeTask {
    doLast {
        mustRunAfter "testLife"
        println '---********---|----|测试用gradle|----|---********---'
    }

}
task X {

    doLast {
        println 'X'
    }
}
task Y {
    mustRunAfter X
    doLast {
        println 'Y'
    }
}
task Z {
    mustRunAfter Y
    doLast {
        println 'Z'
    }
}

/**-------------------------------二段测试---------------------------------**/

//------测试操作xml文件
def getResPath() {
    return 'app/src/main/res/'
}

static def getRandomString() {
    def str = 'abcdefghijklmnopqstuvwxzy'
    def randomString = ''
    for (int i = 0; i < 10; i++) {
        def number = new Random().nextInt(25)
        randomString += str.charAt(number)
    }
    randomString
}





task xmlReplaceEx(){
    doLast{
        def nameMap=[:]
        FileTree tree = fileTree(dir: 'src/main/res/layout')
        tree.include '*.xml'
        tree.each { File file ->
            def appendString = new StringBuilder()
            //取传入的文件的名字，而不是遍历中的文件名
            def originName = file.name.split('\\.').first()
            def randomName = getRandomString()
            boolean hasReplace = false
            file.withReader('UTF-8') { reader ->
                reader.eachLine { line ->
                    if (line.indexOf("@layout/") != -1) {//找到了，就得去nameMap查了
                        //xml前缀名
                        def quoteXmlName=line.substring(line.indexOf("/")+1,line.lastIndexOf("\""))
                        if(nameMap.containsKey(quoteXmlName)){//xml文件已被替换，那么对应的引用也替换掉
                           line= line.replaceAll(quoteXmlName,nameMap.get(quoteXmlName))//替换
                            //这个log有意思
                            println("-------------@layout/$quoteXmlName  has been replaced by ${nameMap.get(quoteXmlName)}")
                        }else{//说明应该替换的@layout文件，还没有自己的随机序列值
                             def shouldRandomName=getRandomString()
                             nameMap.put(quoteXmlName,shouldRandomName)
                            line=line.replaceAll(quoteXmlName,shouldRandomName)
                        }

                        if(quoteXmlName=="activity_top_title"){
                            println("+++++++++*******_++++++nameMap has activity_top_title: ${nameMap.containsKey("activity_top_title")}")
                        }

                        hasReplace = true
                    }
                    appendString.append(line + '\n')
                }
                if (hasReplace) {
                    file.withWriter('UTF-8') { writer ->
                        appendString.eachLine {
                            writer.writeLine(it)
                        }

                    }
                }

            }

            if(nameMap.get(originName)==null){//文件未被重命名且未被分配随机名
                file.renameTo(file.path.replaceAll(originName,randomName))
                nameMap.put(originName,randomName)
                println("$originName has been renamed to $randomName")
            }else{//文件已被分配随机名
                file.renameTo(file.path.replaceAll(originName,nameMap.get(originName)))
            }

        }

        xmlJavaReplace(nameMap)

        //将重命名的文件前后名字---输出到文件中
        File renameFile =file("/config/renameFile.txt")
            renameFile.withWriter ('UTF-8'){ writer->
                nameMap.each {
                    writer.writeLine("$it.key ----------->>>>>>>>>>   $it.value")
                }

            }

    }

}

/**
 * 替换java文件及kt文件中的xml文件
 * */
def xmlJavaReplace(Map nameMap){//等所有XML文件替换完成后，再替换Java里的
    FileTree tree =fileTree(dir:'src/main/java')
    tree.include('**/*.java')
    tree.include('**/*.kt')
    tree.each { File file ->
        def overrideString = new StringBuilder()
        def needReplace=false

        file.withReader { reader->
            reader.eachLine { line ->
                  if(line.indexOf("R.layout.")!=-1){//有布局文件
                      def xmlPrefix=''
                      Pattern pattern=Pattern.compile("[[a-z0-9]_]+")
                      Matcher matcher=pattern.matcher(line.split("\\.")[2])
                      while(matcher.find()){
                         xmlPrefix= matcher.group(0)
                      }
                      if(nameMap.containsKey(xmlPrefix)){
                          line = line.replaceAll(xmlPrefix,nameMap.get(xmlPrefix))
                          needReplace = true
                      }

                  }
                overrideString.append(line+"\n")
            }
        }

        if(needReplace){
            file.withWriter('UTF-8') {writer->
                overrideString.eachLine { line ->
                    writer.writeLine(line)
                }
            }
        }

    }
}

